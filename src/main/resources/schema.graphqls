type Query{
    login(selectionInput: SelectionInput): LoginOutput
    logout(selectionInput: SelectionInput): ResultOutput
    selectUserBySubstring(selectionInput: SelectionInput): [UserOutput]
    getCommitByReceiver(selectionInput: SelectionInput): [CommitPosOutput]
    selectCommentsByCardId(selectionInput: SelectionInput): [CommitTypeOutput]
    sendEmailToInviteReceiverJoinTeam(selectionInput: SelectionInput): ResultOutput
    selectTeamByUsername(selectionInput: SelectionInput): [TeamOutput]
    selectPeopleByTeamId(selectionInput: SelectionInput): [UserOutput]
    selectProjectByCreator(selectionInput: SelectionInput): [ProjectOutput]
    selectProjectById(selectionInput: SelectionInput): ProjectOutput
    selectBoardsByProjectId(selectionInput: SelectionInput): [BoardOutput]
    selectCardsByBoardId(selectionInput: SelectionInput): [CardOutput]
}

type Mutation {
    register(selectionInput: SelectionInput): ResultOutput
    updateUser(selectionInput: SelectionInput): UserOutput

    createTeam(selectionInput: SelectionInput): TeamOutput
    updateTeam(selectionInput: SelectionInput): TeamOutput
    removeTeam(selectionInput: SelectionInput): ResultOutput

    createProject(selectionInput: SelectionInput): ProjectOutput
    updateProject(selectionInput: SelectionInput): ProjectOutput
    removeProject(selectionInput: SelectionInput): ResultOutput

    createBoard(selectionInput: SelectionInput): BoardOutput
    removeBoard(selectionInput: SelectionInput): ResultOutput

    createCard(selectionInput: SelectionInput): CardOutput
    updateCard(selectionInput: SelectionInput): CardOutput
    removeCard(selectionInput: SelectionInput): ResultOutput

    createCommit(selectionInput: SelectionInput): CommitTypeOutput
    updateCommit(selectionInput: SelectionInput): CommitTypeOutput
    removeCommit(selectionInput: SelectionInput): ResultOutput
}

input SelectionInput{
    userInput: UserInput
    teamInput: TeamInput
    projectInput: ProjectInput
    boardInput: BoardInput
    cardInput: CardInput
    commitInput: CommitInput
    emailInput: EmailInput
    uid: String
}

input EmailInput{
    receiverMail: String
    receiver: String
    teamId: String
}

input UserInput{
    username: String
    password: String
    icon: String
    email: String
    power: String
}

input TeamInput{
    id: String
    creator: String
    teamname: String
    description: String
}

input ProjectInput{
    id: String
    projectName: String
    creator: String
    teamId: String
    colTitle: String
    rowTitle: String
    iteration: Int
}

input BoardInput{
    id: String
    projectId: String
}

input CardInput{
    id: String
    title: String
    description: String
    priority: String
    storyPoints: Int
    processor: String
    founder: String
    status: String
    boardId: String
}

input CommitInput{
    id: String
    description: String
    announcer: String
    receiver: String
    cardId: String
    read: Boolean
}

type UserOutput{
    id: String
    password: String
    username: String
    icon: String
    email: String
    power: String
}

type CommitPosOutput{
    commitType: CommitTypeOutput
    commitPos: CommitPosType
}

type CommitPosType{
    cardId: String
    boardId: String
    projectId: String
}

type CommitType{
    id: String
    description: String
    announcer: String
    receiver: String
    updateTime: String
    read: Boolean
    cardId: String
}

type CommitTypeOutput{
    id: String
    description: String
    announcer: UserOutput
    receiver: String
    updateTime: String
    read: Boolean
    cardId: String
}

type ResultOutput{
    success: Boolean
    message: String
}

type TeamOutput{
    id: String
    creator: String
    teamname: String
    description: String
}

type ProjectOutput{
    id: String
    projectName: String
    creator: String
    teamId: String
    createTime: String
    colTitle: [String]
    rowTitle: [String]
    iteration: Int
}

type BoardOutput{
    id: String
    createTime: String
}

type CardOutput{
    id: String
    createTime: String
    title: String
    description: String
    priority: String
    storyPoints: Int
    processor: String
    founder: String
    status: String
    number: Int
}

type LoginOutput{
    userOutput: UserOutput
    token: String
}