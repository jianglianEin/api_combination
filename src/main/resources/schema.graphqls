type Query{
    login(selectionInput: SelectionInput): UserOutput
    logout(username: String): ResultOutput
    getCommitByReceiver(receiver: String): [CommitOutput]
    selectCommentsByCardId(cardId: String): [CommitWithAnnouncerOutput]
    sendEmailToInviteReceiverJoinTeam(emailInput: EmailInput): ResultOutput
    selectTeamByUsername(username: String): [TeamOutput]
    selectUserBySubstring(usernameSubstring: String): [UserOutput]
    selectProjectByCreator(creator: String): [ProjectOutput]
    selectProjectById(projectId: String): ProjectOutput
    selectBoardsByProjectId(projectId: String): [BoardOutput]
    selectCardsByBoardId(boardId: String): [CardOutput]
}

type Mutation {
    register(selectionInput: SelectionInput): ResultOutput
    updateUser(selectionInput: SelectionInput): UserOutput

    createTeam(selectionInput: SelectionInput): TeamOutput
    updateTeam(selectionInput: SelectionInput): TeamOutput

    createProject(selectionInput: SelectionInput): ProjectOutput
    updateProject(selectionInput: SelectionInput): ProjectOutput
    removeProject(projectId: String): ResultOutput

    createBoard(selectionInput: SelectionInput): BoardOutput
    removeBoard(boardId: String): ResultOutput

    createCard(selectionInput: SelectionInput): CardOutput
    updateCard(selectionInput: SelectionInput): CardOutput
    removeCard(cardId: String): ResultOutput

    createCommit(selectionInput: SelectionInput): CommitType
    updateCommit(selectionInput: SelectionInput): CommitType
    removeCommit(commitId: String): ResultOutput
}

input SelectionInput{
    userInput: UserInput
    teamInput: TeamInput
    projectInput: ProjectInput
    boardInput: BoardInput
    cardInput: CardInput
    commitInput: CommitInput
}

input EmailInput{
    receiverMail: String
    announcer: String
    teamId: String
}

input UserInput{
    username: String
    password: String
    icon: String
    email: String
    power: String
}

input TeamInput{
    id: String
    creator: String
    teamname: String
    description: String
}

input ProjectInput{
    id: String
    projectName: String
    creator: String
    teamId: String
    colTitle: String
    rowTitle: String
    iteration: Int
}

input BoardInput{
    projectId: String
}

input CardInput{
    id: String
    title: String
    description: String
    priority: String
    storyPoints: Int
    processor: String
    founder: String
    status: String
    boardId: String
}

input CommitInput{
    id: String
    description: String
    announcer: String
    receiver: String
    cardId: String
    read: Boolean
}

type UserOutput{
    id: String
    password: String
    username: String
    icon: String
    email: String
    power: String
}

type CommitOutput{
    commitType: CommitType
    commitPos: CommitPosType
}

type CommitPosType{
    cardId: String
    boardId: String
    projectId: String
}

type CommitType{
    id: String
    description: String
    announcer: String
    receiver: String
    updateTime: String
    read: Boolean
    cardId: String
}

type CommitWithAnnouncerOutput{
    id: String
    description: String
    announcer: UserOutput
    receiver: String
    updateTime: String
    read: Boolean
    cardId: String
}

type ResultOutput{
    susses: Boolean
    message: String
}

type TeamOutput{
    id: String
    creator: String
    teamname: String
    description: String
}

type ProjectOutput{
    id: String
    projectName: String
    creator: String
    teamId: String
    createTime: String
    colTitle: [String]
    rowTitle: [String]
    iteration: Int
}

type BoardOutput{
    id: String
    createTime: String
}

type CardOutput{
    id: String
    createTime: String
    title: String
    description: String
    priority: String
    storyPoints: Int
    processor: String
    founder: String
    status: String
}