type Query{
    login(selectionInput: SelectionInput): UserOutput
    logout(username: String): ResultOutput
    getCommitByReceiver(receiver: String): [CommitOutput]
    sendEmailToInviteReceiverJoinTeam(emailInput: EmailInput): ResultOutput
}

type Mutation {
    register(selectionInput: SelectionInput): ResultOutput
    updateUser(selectionInput: SelectionInput): ResultOutput

    createTeam(selectionInput: SelectionInput): ResultOutput
}

input SelectionInput{
    userInput: UserInput
    teamInput: TeamInput
}

input EmailInput{
    receiverMail: String
    announcer: String
    teamId: String
}

input UserInput{
    username: String
    password: String
    icon: String
    email: String
    power: String
}

input TeamInput{
    id: String
    creator: String
    teamname: String
    description: String
}

type UserOutput{
    id: String
    password: String
    username: String
    icon: String
    email: String
    power: String
}

type CommitOutput{
    id: String
    description: String
    announcer: String
    receiver: String
    updateTime: String
    cardId: String
    read: Boolean
}

type ResultOutput{
    susses: Boolean
    message: String
}